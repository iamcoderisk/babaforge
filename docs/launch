cat > /opt/sendbaba-smtp/deploy_production.sh << 'EOF'
#!/bin/bash

#################################################################
# SendBaba Production Deployment Script
# Server: 156.67.29.186
# Domain: sendbaba.com
# Author: SendBaba Team
# Version: 1.0.0
#################################################################

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Configuration
DOMAIN="sendbaba.com"
SERVER_IP="156.67.29.186"
APP_DIR="/opt/sendbaba-smtp"
POSTGRES_PASSWORD="SecurePassword123!"
DB_NAME="email_system"
DB_USER="emailer"

# Print banner
print_banner() {
    clear
    echo -e "${CYAN}"
    cat << "BANNER"
╔════════════════════════════════════════════════════════════╗
║                                                            ║
║   ███████╗███████╗███╗   ██╗██████╗ ██████╗  █████╗      ║
║   ██╔════╝██╔════╝████╗  ██║██╔══██╗██╔══██╗██╔══██╗     ║
║   ███████╗█████╗  ██╔██╗ ██║██║  ██║██████╔╝███████║     ║
║   ╚════██║██╔══╝  ██║╚██╗██║██║  ██║██╔══██╗██╔══██║     ║
║   ███████║███████╗██║ ╚████║██████╔╝██████╔╝██║  ██║     ║
║   ╚══════╝╚══════╝╚═╝  ╚═══╝╚═════╝ ╚═════╝ ╚═╝  ╚═╝     ║
║                                                            ║
║        Enterprise Email Platform - Production Deploy      ║
║                  sendbaba.com                              ║
╚════════════════════════════════════════════════════════════╝
BANNER
    echo -e "${NC}"
    echo -e "${GREEN}Starting deployment to ${SERVER_IP}...${NC}\n"
    sleep 2
}

# Check if running as root
check_root() {
    if [ "$EUID" -ne 0 ]; then 
        echo -e "${RED}❌ Error: Please run as root (use sudo)${NC}"
        exit 1
    fi
    echo -e "${GREEN}✓ Running as root${NC}"
}

# Step 1: System Update
step_system_update() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}📦 STEP 1: Updating System Packages${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    apt-get update -qq
    apt-get upgrade -y -qq
    
    echo -e "${GREEN}✓ System updated${NC}"
}

# Step 2: Install Dependencies
step_install_dependencies() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}📦 STEP 2: Installing Dependencies${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    echo "Installing packages..."
    apt-get install -y -qq \
        nginx \
        certbot \
        python3-certbot-nginx \
        postgresql \
        postgresql-contrib \
        redis-server \
        supervisor \
        ufw \
        python3-pip \
        python3-venv \
        git \
        curl \
        wget \
        htop \
        build-essential \
        libpq-dev \
        python3-dev
    
    echo -e "${GREEN}✓ All dependencies installed${NC}"
}

# Step 3: Configure Firewall
step_configure_firewall() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}🔥 STEP 3: Configuring Firewall${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    ufw --force enable
    ufw allow 22/tcp    # SSH
    ufw allow 80/tcp    # HTTP
    ufw allow 443/tcp   # HTTPS
    ufw allow 25/tcp    # SMTP
    ufw allow 587/tcp   # SMTP Submission
    ufw allow 465/tcp   # SMTPS
    
    echo -e "${GREEN}✓ Firewall configured${NC}"
    ufw status
}

# Step 4: Setup PostgreSQL
step_setup_postgresql() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}🐘 STEP 4: Setting up PostgreSQL${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    # Check if database exists
    DB_EXISTS=$(sudo -u postgres psql -tAc "SELECT 1 FROM pg_database WHERE datname='$DB_NAME'" 2>/dev/null || echo "0")
    
    if [ "$DB_EXISTS" != "1" ]; then
        echo "Creating database and user..."
        sudo -u postgres psql << PSQL
CREATE DATABASE $DB_NAME;
CREATE USER $DB_USER WITH ENCRYPTED PASSWORD '$POSTGRES_PASSWORD';
ALTER DATABASE $DB_NAME OWNER TO $DB_USER;
GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;
\q
PSQL
        echo -e "${GREEN}✓ PostgreSQL database created${NC}"
    else
        echo -e "${YELLOW}⚠ Database already exists, skipping creation${NC}"
    fi
    
    # Configure PostgreSQL for performance
    PG_CONF="/etc/postgresql/*/main/postgresql.conf"
    if [ -f /etc/postgresql/12/main/postgresql.conf ]; then
        PG_CONF="/etc/postgresql/12/main/postgresql.conf"
    elif [ -f /etc/postgresql/14/main/postgresql.conf ]; then
        PG_CONF="/etc/postgresql/14/main/postgresql.conf"
    fi
    
    # Backup original config
    cp $PG_CONF ${PG_CONF}.backup
    
    # Optimize settings
    cat >> $PG_CONF << PGCONF

# SendBaba Optimizations
max_connections = 200
shared_buffers = 2GB
effective_cache_size = 6GB
maintenance_work_mem = 512MB
work_mem = 10MB
PGCONF
    
    systemctl restart postgresql
    echo -e "${GREEN}✓ PostgreSQL configured and restarted${NC}"
}

# Step 5: Setup Redis
step_setup_redis() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}🔴 STEP 5: Setting up Redis${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    # Configure Redis
    cat > /etc/redis/redis.conf << REDISCONF
bind 127.0.0.1
protected-mode yes
port 6379
maxmemory 2gb
maxmemory-policy allkeys-lru
save 900 1
save 300 10
save 60 10000
REDISCONF
    
    systemctl enable redis-server
    systemctl restart redis-server
    
    echo -e "${GREEN}✓ Redis configured and running${NC}"
}

# Step 6: Generate DKIM Keys
step_generate_dkim() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}🔑 STEP 6: Generating DKIM Keys${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    mkdir -p $APP_DIR/data/dkim
    cd $APP_DIR/data/dkim
    
    if [ ! -f private.key ]; then
        openssl genrsa -out private.key 2048
        openssl rsa -in private.key -pubout -out public.key
        chmod 600 private.key
        chmod 644 public.key
        echo -e "${GREEN}✓ DKIM keys generated${NC}"
    else
        echo -e "${YELLOW}⚠ DKIM keys already exist${NC}"
    fi
    
    # Extract public key for DNS
    DKIM_PUBLIC=$(grep -v "BEGIN PUBLIC KEY" public.key | grep -v "END PUBLIC KEY" | tr -d '\n')
    
    echo -e "\n${YELLOW}📋 Add this DKIM DNS record:${NC}"
    echo -e "${CYAN}default._domainkey.sendbaba.com. TXT \"v=DKIM1; k=rsa; p=${DKIM_PUBLIC}\"${NC}\n"
}

# Step 7: Setup Python Environment
step_setup_python() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}🐍 STEP 7: Setting up Python Environment${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    cd $APP_DIR
    
    # Create virtual environment if it doesn't exist
    if [ ! -d "venv" ]; then
        python3 -m venv venv
        echo -e "${GREEN}✓ Virtual environment created${NC}"
    fi
    
    # Activate and install dependencies
    source venv/bin/activate
    pip install --upgrade pip -q
    pip install -r requirements.txt -q
    pip install gunicorn gevent psycopg2-binary redis -q
    
    echo -e "${GREEN}✓ Python environment ready${NC}"
}

# Step 8: Initialize Database
step_init_database() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}💾 STEP 8: Initializing Database${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    cd $APP_DIR
    source venv/bin/activate
    
    export FLASK_ENV=production
    export DATABASE_URL="postgresql://$DB_USER:$POSTGRES_PASSWORD@localhost:5432/$DB_NAME"
    
    # Initialize database
    python << PYEOF
import os
os.environ['FLASK_ENV'] = 'production'
os.environ['DATABASE_URL'] = 'postgresql://$DB_USER:$POSTGRES_PASSWORD@localhost:5432/$DB_NAME'

try:
    from run import app
    from app import db
    with app.app_context():
        db.create_all()
        print("✓ Database tables created successfully")
except Exception as e:
    print(f"Database initialization: {e}")
PYEOF
    
    echo -e "${GREEN}✓ Database initialized${NC}"
}

# Step 9: Configure Nginx
step_configure_nginx() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}🌐 STEP 9: Configuring Nginx${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    cat > /etc/nginx/sites-available/sendbaba.com << 'NGINX'
upstream sendbaba_app {
    least_conn;
    server 127.0.0.1:5000 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:5001 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:5002 max_fails=3 fail_timeout=30s;
    server 127.0.0.1:5003 max_fails=3 fail_timeout=30s;
    keepalive 32;
}

# HTTP Server
server {
    listen 80;
    listen [::]:80;
    server_name sendbaba.com www.sendbaba.com 156.67.29.186;
    
    # Logging
    access_log /var/log/nginx/sendbaba-access.log;
    error_log /var/log/nginx/sendbaba-error.log;
    
    # Let's Encrypt challenge
    location /.well-known/acme-challenge/ {
        root /var/www/html;
    }
    
    # Static files
    location /static {
        alias /opt/sendbaba-smtp/app/static;
        expires 30d;
        add_header Cache-Control "public, immutable";
        gzip on;
        gzip_types text/css application/javascript image/svg+xml;
    }
    
    # Health check
    location /health {
        access_log off;
        proxy_pass http://sendbaba_app;
        proxy_http_version 1.1;
        proxy_set_header Connection "";
    }
    
    # Main application
    location / {
        proxy_pass http://sendbaba_app;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Timeouts
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # Buffering
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
    }
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    location /api/ {
        limit_req zone=api burst=20 nodelay;
        proxy_pass http://sendbaba_app;
    }
}
NGINX
    
    # Enable site
    ln -sf /etc/nginx/sites-available/sendbaba.com /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default
    
    # Test configuration
    nginx -t
    systemctl reload nginx
    
    echo -e "${GREEN}✓ Nginx configured${NC}"
}

# Step 10: Configure Supervisor
step_configure_supervisor() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}⚙️  STEP 10: Configuring Supervisor${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    cat > /etc/supervisor/conf.d/sendbaba.conf << SUPERVISOR
[program:sendbaba-web-5000]
command=/opt/sendbaba-smtp/venv/bin/gunicorn -w 4 -k gevent -b 127.0.0.1:5000 --timeout 120 --max-requests 1000 --max-requests-jitter 100 run:app
directory=/opt/sendbaba-smtp
environment=FLASK_ENV="production",DATABASE_URL="postgresql://$DB_USER:$POSTGRES_PASSWORD@localhost:5432/$DB_NAME",REDIS_HOST="localhost",DOMAIN="sendbaba.com",SERVER_IP="156.67.29.186"
user=root
autostart=true
autorestart=true
stderr_logfile=/var/log/sendbaba-5000.err.log
stdout_logfile=/var/log/sendbaba-5000.out.log
redirect_stderr=true

[program:sendbaba-web-5001]
command=/opt/sendbaba-smtp/venv/bin/gunicorn -w 4 -k gevent -b 127.0.0.1:5001 --timeout 120 --max-requests 1000 --max-requests-jitter 100 run:app
directory=/opt/sendbaba-smtp
environment=FLASK_ENV="production",DATABASE_URL="postgresql://$DB_USER:$POSTGRES_PASSWORD@localhost:5432/$DB_NAME",REDIS_HOST="localhost",DOMAIN="sendbaba.com",SERVER_IP="156.67.29.186"
user=root
autostart=true
autorestart=true
stderr_logfile=/var/log/sendbaba-5001.err.log
stdout_logfile=/var/log/sendbaba-5001.out.log
redirect_stderr=true

[program:sendbaba-web-5002]
command=/opt/sendbaba-smtp/venv/bin/gunicorn -w 4 -k gevent -b 127.0.0.1:5002 --timeout 120 --max-requests 1000 --max-requests-jitter 100 run:app
directory=/opt/sendbaba-smtp
environment=FLASK_ENV="production",DATABASE_URL="postgresql://$DB_USER:$POSTGRES_PASSWORD@localhost:5432/$DB_NAME",REDIS_HOST="localhost",DOMAIN="sendbaba.com",SERVER_IP="156.67.29.186"
user=root
autostart=true
autorestart=true
stderr_logfile=/var/log/sendbaba-5002.err.log
stdout_logfile=/var/log/sendbaba-5002.out.log
redirect_stderr=true

[program:sendbaba-web-5003]
command=/opt/sendbaba-smtp/venv/bin/gunicorn -w 4 -k gevent -b 127.0.0.1:5003 --timeout 120 --max-requests 1000 --max-requests-jitter 100 run:app
directory=/opt/sendbaba-smtp
environment=FLASK_ENV="production",DATABASE_URL="postgresql://$DB_USER:$POSTGRES_PASSWORD@localhost:5432/$DB_NAME",REDIS_HOST="localhost",DOMAIN="sendbaba.com",SERVER_IP="156.67.29.186"
user=root
autostart=true
autorestart=true
stderr_logfile=/var/log/sendbaba-5003.err.log
stdout_logfile=/var/log/sendbaba-5003.out.log
redirect_stderr=true

[group:sendbaba]
programs=sendbaba-web-5000,sendbaba-web-5001,sendbaba-web-5002,sendbaba-web-5003
priority=999
SUPERVISOR
    
    # Reload supervisor
    supervisorctl reread
    supervisorctl update
    sleep 3
    supervisorctl start sendbaba:*
    
    echo -e "${GREEN}✓ Supervisor configured${NC}"
}

# Step 11: Create Management Scripts
step_create_scripts() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}📝 STEP 11: Creating Management Scripts${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    # Status script
    cat > $APP_DIR/status.sh << 'STATUS'
#!/bin/bash
echo "=== SendBaba Status ==="
echo ""
echo "Services:"
supervisorctl status sendbaba:*
echo ""
echo "Nginx:"
systemctl status nginx --no-pager | head -3
echo ""
echo "PostgreSQL:"
systemctl status postgresql --no-pager | head -3
echo ""
echo "Redis:"
systemctl status redis-server --no-pager | head -3
echo ""
echo "Recent Logs:"
tail -n 5 /var/log/sendbaba-5000.out.log
STATUS
    
    # Restart script
    cat > $APP_DIR/restart.sh << 'RESTART'
#!/bin/bash
echo "Restarting SendBaba services..."
supervisorctl restart sendbaba:*
nginx -t && systemctl reload nginx
echo "✓ Services restarted"
RESTART
    
    # Logs script
    cat > $APP_DIR/logs.sh << 'LOGS'
#!/bin/bash
echo "=== Recent Logs ==="
tail -f /var/log/sendbaba-5000.out.log
LOGS
    
    chmod +x $APP_DIR/{status.sh,restart.sh,logs.sh}
    
    echo -e "${GREEN}✓ Management scripts created${NC}"
}

# Step 12: Display Summary
step_display_summary() {
    echo -e "\n${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${CYAN}🎉 DEPLOYMENT COMPLETE${NC}"
    echo -e "${BLUE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}\n"
    
    # Check service status
    echo -e "${PURPLE}Service Status:${NC}"
    supervisorctl status sendbaba:* | while read line; do
        if echo "$line" | grep -q "RUNNING"; then
            echo -e "${GREEN}✓${NC} $line"
        else
            echo -e "${RED}✗${NC} $line"
        fi
    done
    
    echo -e "\n${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}🌐 Access Points:${NC}"
    echo -e "${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "  Main Site:    ${CYAN}http://sendbaba.com${NC}"
    echo -e "  Dashboard:    ${CYAN}http://sendbaba.com/dashboard${NC}"
    echo -e "  DNS Setup:    ${CYAN}http://sendbaba.com/dns/setup${NC}"
    echo -e "  API:          ${CYAN}http://sendbaba.com/api/v1${NC}"
    echo -e "  Health:       ${CYAN}http://sendbaba.com/health${NC}"
    echo -e "  Direct IP:    ${CYAN}http://156.67.29.186${NC}"
    
    echo -e "\n${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${YELLOW}📋 DNS Records (Add these at your domain registrar):${NC}"
    echo -e "${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    cat << DNS
${CYAN}A Records:${NC}
  sendbaba.com          A     156.67.29.186
  www.sendbaba.com      A     156.67.29.186
  mail.sendbaba.com     A     156.67.29.186

${CYAN}MX Record:${NC}
  sendbaba.com          MX    10 mail.sendbaba.com

${CYAN}SPF Record:${NC}
  sendbaba.com          TXT   "v=spf1 ip4:156.67.29.186 ~all"

${CYAN}DKIM Record:${NC}
  Get from: http://sendbaba.com/dns/records

${CYAN}DMARC Record:${NC}
  _dmarc.sendbaba.com   TXT   "v=DMARC1; p=quarantine; rua=mailto:dmarc@sendbaba.com"
DNS
    
    echo -e "\n${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}📝 Management Commands:${NC}"
    echo -e "${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "  Status:      ${CYAN}./status.sh${NC}"
    echo -e "  Restart:     ${CYAN}./restart.sh${NC}"
    echo -e "  Logs:        ${CYAN}./logs.sh${NC}"
    echo -e "  Stop:        ${CYAN}supervisorctl stop sendbaba:*${NC}"
    echo -e "  Start:       ${CYAN}supervisorctl start sendbaba:*${NC}"
    
    echo -e "\n${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${GREEN}🧪 Test Commands:${NC}"
    echo -e "${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    
    cat << TEST
# Test health endpoint
${CYAN}curl http://sendbaba.com/health${NC}

# Send test email
${CYAN}curl -X POST http://sendbaba.com/api/v1/send \\
  -H "Content-Type: application/json" \\
  -d '{
    "to": "test@example.com",
    "from": "hello@sendbaba.com",
    "subject": "Test Email",
    "text_body": "Hello from SendBaba!"
  }'${NC}

# Check metrics
${CYAN}curl http://sendbaba.com/api/v1/metrics${NC}
TEST
    
    echo -e "\n${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${YELLOW}⚠️  Next Steps:${NC}"
    echo -e "${PURPLE}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "1. Add DNS records shown above"
    echo -e "2. Wait 5-60 minutes for DNS propagation"
    echo -e "3. Run: ${CYAN}./setup_ssl.sh${NC} to enable HTTPS"
    echo -e "4. Test API endpoints"
    echo -e "5. Configure email clients to use SMTP"
    
    echo -e "\n${GREEN}✅ SendBaba is now running on sendbaba.com!${NC}\n"
}

# Main execution
main() {
    print_banner
    check_root
    
    step_system_update
    step_install_dependencies
    step_configure_firewall
    step_setup_postgresql
    step_setup_redis
    step_generate_dkim
    step_setup_python
    step_init_database
    step_configure_nginx
    step_configure_supervisor
    step_create_scripts
    step_display_summary
}

# Run main function
main

EOF

chmod +x /opt/sendbaba-smtp/deploy_production.sh